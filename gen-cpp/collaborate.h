/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef collaborate_H
#define collaborate_H

#include <thrift/TDispatchProcessor.h>
#include "collaborator_types.h"

namespace huang { namespace collaborator {

class collaborateIf {
 public:
  virtual ~collaborateIf() {}
  virtual void action(std::string& _return, const UserInfo& user, const int32_t cmdId, const std::string& params) = 0;
  virtual void callback(const UserInfo& user, const int32_t eventId, const std::string& contents) = 0;
  virtual void ping() = 0;
};

class collaborateIfFactory {
 public:
  typedef collaborateIf Handler;

  virtual ~collaborateIfFactory() {}

  virtual collaborateIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(collaborateIf* /* handler */) = 0;
};

class collaborateIfSingletonFactory : virtual public collaborateIfFactory {
 public:
  collaborateIfSingletonFactory(const boost::shared_ptr<collaborateIf>& iface) : iface_(iface) {}
  virtual ~collaborateIfSingletonFactory() {}

  virtual collaborateIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(collaborateIf* /* handler */) {}

 protected:
  boost::shared_ptr<collaborateIf> iface_;
};

class collaborateNull : virtual public collaborateIf {
 public:
  virtual ~collaborateNull() {}
  void action(std::string& /* _return */, const UserInfo& /* user */, const int32_t /* cmdId */, const std::string& /* params */) {
    return;
  }
  void callback(const UserInfo& /* user */, const int32_t /* eventId */, const std::string& /* contents */) {
    return;
  }
  void ping() {
    return;
  }
};

typedef struct _collaborate_action_args__isset {
  _collaborate_action_args__isset() : user(false), cmdId(false), params(false) {}
  bool user;
  bool cmdId;
  bool params;
} _collaborate_action_args__isset;

class collaborate_action_args {
 public:

  collaborate_action_args() : cmdId(0), params() {
  }

  virtual ~collaborate_action_args() throw() {}

  UserInfo user;
  int32_t cmdId;
  std::string params;

  _collaborate_action_args__isset __isset;

  void __set_user(const UserInfo& val) {
    user = val;
  }

  void __set_cmdId(const int32_t val) {
    cmdId = val;
  }

  void __set_params(const std::string& val) {
    params = val;
  }

  bool operator == (const collaborate_action_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(cmdId == rhs.cmdId))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const collaborate_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const collaborate_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class collaborate_action_pargs {
 public:


  virtual ~collaborate_action_pargs() throw() {}

  const UserInfo* user;
  const int32_t* cmdId;
  const std::string* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _collaborate_action_result__isset {
  _collaborate_action_result__isset() : success(false) {}
  bool success;
} _collaborate_action_result__isset;

class collaborate_action_result {
 public:

  collaborate_action_result() : success() {
  }

  virtual ~collaborate_action_result() throw() {}

  std::string success;

  _collaborate_action_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const collaborate_action_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const collaborate_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const collaborate_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _collaborate_action_presult__isset {
  _collaborate_action_presult__isset() : success(false) {}
  bool success;
} _collaborate_action_presult__isset;

class collaborate_action_presult {
 public:


  virtual ~collaborate_action_presult() throw() {}

  std::string* success;

  _collaborate_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _collaborate_callback_args__isset {
  _collaborate_callback_args__isset() : user(false), eventId(false), contents(false) {}
  bool user;
  bool eventId;
  bool contents;
} _collaborate_callback_args__isset;

class collaborate_callback_args {
 public:

  collaborate_callback_args() : eventId(0), contents() {
  }

  virtual ~collaborate_callback_args() throw() {}

  UserInfo user;
  int32_t eventId;
  std::string contents;

  _collaborate_callback_args__isset __isset;

  void __set_user(const UserInfo& val) {
    user = val;
  }

  void __set_eventId(const int32_t val) {
    eventId = val;
  }

  void __set_contents(const std::string& val) {
    contents = val;
  }

  bool operator == (const collaborate_callback_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(eventId == rhs.eventId))
      return false;
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const collaborate_callback_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const collaborate_callback_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class collaborate_callback_pargs {
 public:


  virtual ~collaborate_callback_pargs() throw() {}

  const UserInfo* user;
  const int32_t* eventId;
  const std::string* contents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class collaborate_ping_args {
 public:

  collaborate_ping_args() {
  }

  virtual ~collaborate_ping_args() throw() {}


  bool operator == (const collaborate_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const collaborate_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const collaborate_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class collaborate_ping_pargs {
 public:


  virtual ~collaborate_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class collaborate_ping_result {
 public:

  collaborate_ping_result() {
  }

  virtual ~collaborate_ping_result() throw() {}


  bool operator == (const collaborate_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const collaborate_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const collaborate_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class collaborate_ping_presult {
 public:


  virtual ~collaborate_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class collaborateClient : virtual public collaborateIf {
 public:
  collaborateClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  collaborateClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void action(std::string& _return, const UserInfo& user, const int32_t cmdId, const std::string& params);
  void send_action(const UserInfo& user, const int32_t cmdId, const std::string& params);
  void recv_action(std::string& _return);
  void callback(const UserInfo& user, const int32_t eventId, const std::string& contents);
  void send_callback(const UserInfo& user, const int32_t eventId, const std::string& contents);
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class collaborateProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<collaborateIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (collaborateProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_callback(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  collaborateProcessor(boost::shared_ptr<collaborateIf> iface) :
    iface_(iface) {
    processMap_["action"] = &collaborateProcessor::process_action;
    processMap_["callback"] = &collaborateProcessor::process_callback;
    processMap_["ping"] = &collaborateProcessor::process_ping;
  }

  virtual ~collaborateProcessor() {}
};

class collaborateProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  collaborateProcessorFactory(const ::boost::shared_ptr< collaborateIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< collaborateIfFactory > handlerFactory_;
};

class collaborateMultiface : virtual public collaborateIf {
 public:
  collaborateMultiface(std::vector<boost::shared_ptr<collaborateIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~collaborateMultiface() {}
 protected:
  std::vector<boost::shared_ptr<collaborateIf> > ifaces_;
  collaborateMultiface() {}
  void add(boost::shared_ptr<collaborateIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void action(std::string& _return, const UserInfo& user, const int32_t cmdId, const std::string& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->action(_return, user, cmdId, params);
    }
    ifaces_[i]->action(_return, user, cmdId, params);
    return;
  }

  void callback(const UserInfo& user, const int32_t eventId, const std::string& contents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->callback(user, eventId, contents);
    }
    ifaces_[i]->callback(user, eventId, contents);
  }

  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

};

}} // namespace

#endif

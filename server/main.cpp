// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "collaborate.h"
#include "CollaborateHandler.h"
#include "Debug.h"
#include <sys/time.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::huang::collaborator;

int main(int argc, char **argv)
{
	  int port = 19090;
	  boost::shared_ptr<CollaborateHandler> handler(new CollaborateHandler());
	  boost::shared_ptr<TProcessor> processor(new collaborateProcessor(handler));
	  boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	  boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	  boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	  boost::shared_ptr<ServerEventHandler> spEventHandler(new ServerEventHandler());

	  TThreadedServer threadedServer(processor, serverTransport, transportFactory, protocolFactory);
	  threadedServer.setServerEventHandler(spEventHandler);
	  threadedServer.serve();

	  return 0;
}

